function mkcd() {
    mkdir -p "$1" && cd "$1"
}
compdef _directories mkcd

function ccat() {
    pygmentize "$@" | expand -t4
}
compdef _files ccat

function nvim-clearundo() {
    tmpfile=`mktemp`

    nvim --headless \
        +"call writefile([&undodir], '$tmpfile', 'b')" \
        +q >/dev/null 2>&1

    undodir=`<"$tmpfile"`
    rm -f "$tmpfile"

    [ -z "$undodir" ] || rm -r "$undodir"
    return $?
}

function nvim-startup() {
    tempfile=`mktemp /tmp/nvim-startupXXXXXX`
    nvim --startuptime $tempfile $@ &&
        nvim -u NORC $tempfile
    rm $tempfile
}

##

function pipxvenv() {
    if [ $# -lt 1 ]; then
        echo "Error: missing argument" >&2
        echo "Usage:\n  pipxvenv <package>" >&2
        return 1
    fi

    local pkg="${PIPX_HOME-$HOME/.local/pipx}/venvs/$1"
    if ! [ -d "$pkg" ]; then
        echo "Error: failed to found the package $1" >&2
        echo "Usage:\n  pipxvenv <package>" >&2
        return 1
    fi

    if ! [ -f "$pkg/bin/activate" ]; then
        echo "Error: failed to activate" >&2
        echo "Usage:\n  pipxvenv <package>" >&2
        return 1
    fi

    . "$pkg/bin/activate"
}
compdef _pipxvenv pipxvenv

function ghcup-activate() {
    export PATH="$HOME/.ghcup/bin:$PATH"
    GHCUP_ENV=1

    function ghcup-deactivate() {
        PATH=:$PATH:
        PATH=${PATH//:$HOME\/.ghcup\/bin:/:}
        PATH=${PATH#:}; PATH=${PATH%:}
        unset -f ghcup-deactivate
        unset GHCUP_ENV
    }
}

function syncdir() {
    # cd mode
    if [ -p "/tmp/syncmsg.syncdir" ]; then
        folder=`syncmsg syncdir` || return $?
        cd $folder
        return $?
    fi

    pwd | syncmsg -w -s syncdir
}

function alarm_at() {
    local d="$1"
    shift
    echo alarm "$@" | at "$d"
}

function set_timer() {
    local rem
    if [[ "$1" =~ ^[0-9]+$ ]]; then
        rem=$1
    elif [[ "$1" =~ ^[0-9]+:[0-9]+$ ]]; then
        rem=$((60 * ${1%:*} + ${1#*:}))
    else
        echo "set_timer: Number expected in the first argument!" >&2
        return 1
    fi
    shift

    if (( $# < 1 )); then
        echo "set_timer: Title expected in the second argument" >&2
        return 1
    fi

    while true; do
        printf "%02d:%02d\n" $(($rem/60)) $(($rem%60))
        if (( $rem == 0 )); then
            alarm "$@"
            break
        fi

        sleep 1
        rem=$(($rem - 1))
    done
}

function stopwatch() {
    local rem=0
    while true; do
        printf "%02d:%02d\n" $(($rem/60)) $(($rem%60))
        sleep 1
        rem=$(($rem + 1))
    done
}

function check_exe() {
    # TODO: Command is not the right way to solve this problem
    command -v "$1" > /dev/null
}

function termcd() {
    local DIR="`termcd-helper`" && cd "$DIR"
}
alias tcd='termcd'

function spawn_in() {
    (
        cd "$1" || return $?
        shift
        exec "$@"
    )
}

function nvcfg() {
    local config="${XDG_CONFIG_HOME:-$HOME/.config}/nvim" 
    local filename="$(spawn_in "$config" fzf)"
    print -s spawn_in "$config" nvim "$filename"
    spawn_in "$config" nvim "$filename"
}

function open() {
    local logfile="${XDG_CACHE_HOME:-$HOME/.cache}/open.log"

    while [ "$#" -gt 0 ]; do
        ( xdg-open "$1" >"$logfile" 2>&1 & )
        shift
    done
}

function dotfiles-add() {
    local tracked_folders=(
        "$HOME/.bin"
        "$HOME/.config/conky"
        "$HOME/.config/dunst"
        "$HOME/.config/kitty"
        "$HOME/.config/nvim"
        "$HOME/.config/picom"
        "$HOME/.config/rofi"
        "$HOME/.config/thmm"
        "$HOME/.config/xmobar"
        "$HOME/.config/xsettingsd"
        "$HOME/.github"
        "$HOME/.xmonad"
        "$HOME/.zsh-completions"
    )
    /usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME add "${tracked_folders[@]}"
    /usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME add -u
}
