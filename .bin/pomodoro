#!/bin/bash
# A pomodoro timer
# Dependencies: at, alarm(script)

export LC_TIME=C

timer="25"
short_break="5"
long_break="30"

if ! [ -d "$XDG_RUNTIME_DIR" ]; then
    lock_file="/tmp/pomodoro_$UID.lock"
else
    lock_file="${XDG_RUNTIME_DIR}/pomodoro.lock"
fi

mode=""

while [ $# -gt 0 ]; do
    case "$1" in
        -t)
            shift
            custom="$1"
            ;;
        *)
            [ -z "$mode" ] && mode="$1" || exit 1
            ;;
    esac
    shift
done

_run_alarm() {
    local alarm_pid=$BASHPID

    touch $lock_file
    trap "unlink $lock_file" EXIT

    echo $alarm_pid > "$lock_file" # pid
    ps -o comm --no-headers $alarm_pid >> "$lock_file" # comm
    date >> "$lock_file" # date
    echo "$1" >> "$lock_file" # timer

    sleep "$1m"
    alarm -i pomodoro-indicator Pomodoro "$2"
}

run_alarm() {
    if [ -f "$lock_file" ]; then
        echo "Pomodoro: There is a running instance!" >&2
        return 1
    fi

    ( _run_alarm "$@" >/dev/null 2>&1 & )
    return 0
}

read_lockfile() {
    if ! [ -f "$lock_file" ]; then
        echo "Pomodoro: Failed to get information!" >&2
        exit 1
    fi

    {
        read -r p_pid
        read -r p_comm
        read -r p_date
        read -r p_timer
    } < "$lock_file"

    p_end=`date -d "${p_date} + ${p_timer} minutes"`
}

case "$mode" in
    start)
        [ -z "${custom+x}" ] &&
            c_timer=$timer ||
            c_timer=$custom

        run_alarm $c_timer "Hora de uma pausa!" || exit 1
        echo "Pomodoro: Timer was started! (${c_timer} minutes)"
        ;;
    short)
        [ -z "${custom+x}" ] &&
            c_timer=$short_break ||
            c_timer=$custom
 
        run_alarm $c_timer "Fim da pausa!" || exit 1
        echo "Pomodoro: Short break! (${c_timer} minutes)"
        ;;
    long)
        [ -z "${custom+x}" ] &&
            c_timer=$long_break ||
            c_timer=$custom

        run_alarm $c_timer "Fim da pausa!" || exit 1
        echo "Pomodoro: Long break! (${c_timer} minutes)"
        ;;
    stop)
        read_lockfile

        if c_comm=`ps -o comm --no-headers $p_pid` && [ "$c_comm" = "$p_comm" ]; then
            kill $p_pid
        else
            echo "WARNING: Failed to validate the process!" >&2
            echo "The lockfile will be deleted!" >&2

            unlink "$lock_file"
        fi

        ;;
    show)
        read_lockfile

        echo PID $p_pid
        echo COMM $p_comm
        echo DATE $p_date
        echo END $p_end
        ;;
    *)
        exit 1
        ;;
esac
